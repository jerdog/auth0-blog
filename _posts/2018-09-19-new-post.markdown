---
layout: post
title: "Developing a RESTful Client with Retrofit and Spring Boot"
metatitle: "Developing a RESTful Client with Retrofit and Spring Boot"
description: "Learn how to use Retrofit and Spring Boot to develop a RESTful HTTP client to GitHub's API."
metadescription: "Learn how to use Retrofit and Spring Boot to develop a RESTful HTTP client to GitHub's API."
date: 2018-09-19 07:56
category: Technical Guide, First Application, Retrofit
post_length: <1-5 (Run postlength.sh to generate score when article is ready)>
author:
  name: "Vladimir Fomene"
  url: "https://twitter.com/VladimirFomene"
  mail: "vladimirfomene@gmail.com"
  avatar: "https://s.gravatar.com/avatar/30b8d1b7c0dab4bb311c121a47a6aae9?s=80"
design:
  bg_color: "#3471C0"
  image: "https://cdn.auth0.com/blog/java-jcp/logo.png"
tags:
- retrofit
- spring-boot
- java
- http-client
- http
- restful
- rest
- restful-api
related:
- 2017-09-05-automatically-mapping-dto-to-entity-on-spring-boot-apis
- 2017-03-30-java-platform-and-java-community-process-overview
- 2017-08-10-implementing-jwt-authentication-on-spring-boot
---

**TL;DR:** In this article ,you will learn how to use [Retrofit, an HTTP client library](https://square.github.io/retrofit/), and [Spring Boot](https://spring.io/projects/spring-boot) to create a client for a RESTful API. You will use Spring Boot and its `RestController` functionality alongside Retrofit to develop a facade over GitHub's API. You will also learn how to convert JSON to POJOs (Plain Old Java Objects) using [Google's Gson](https://github.com/google/gson) library and, last but not least, you will learn how to use the documentation of a RESTful API to your advantage. If you need, you can find the reference code developed throughout this article in this GitHub repository.

## Prerequisites

To follow this article along, you will need to have the following:

* JDK 8 or greater (JDK 10 was used in this article).
* A mature IDE (Integrated Development Environment) of your choice (i.e., [IntelliJ](https://www.jetbrains.com/idea/), [Netbeans](https://netbeans.org/), or [Eclipse](https://www.eclipse.org/)).
* An external HTTP client like [`curl`](https://curl.haxx.se/), [Postman](getpostman.com), or whatever.
* [A GitHub account](https://github.com/).

Once you have all of these, all you need is:

- A basic understanding of [the client-server architecture](https://www.webopedia.com/TERM/C/client_server_architecture.html).
- Some knowledge around [the HTTP protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol).
- Some basic to intermediate knowledge of [the Java programming language](https://en.wikipedia.org/wiki/Java_(programming_language)).
- Basic knowledge around [Spring Boot](https://spring.io/projects/spring-boot).

## What is a RESTful Client?

REST, which stands for _Representational State Transfer_, is an architecture style used to design web APIs
(Application Programming Interfaces). REST is not a standard but rather a set of constraints used to design web APIs in
well designed format. In REST, `GET` requests should be used for resource lookup and `PUT`, `POST`, `DELETE` for updating,
creating, and deleting a resource respectively.

In this article, you will develop a Spring Boot app that is a RESTful client because it follows this constraints to communicate with a RESTful API ([GitHub's API](https://api.github.com)).

The explanation above is just a quick introduction so you know what this is all about. As you can imagine, there is much more when it comes to the RESTful architecture. If you are curious, you can check the following resources after reading this article:

- [REST Architectural Constraints](https://restfulapi.net/rest-architectural-constraints/)
- [Richardson Maturity Model](https://martinfowler.com/articles/richardsonMaturityModel.html)
