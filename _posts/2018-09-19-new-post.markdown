---
layout: post
title: "Developing a RESTful Client with Retrofit and Spring Boot"
metatitle: "Developing a RESTful Client with Retrofit and Spring Boot"
description: "Learn how to use Retrofit and Spring Boot to develop a RESTful HTTP client to GitHub's API."
metadescription: "Learn how to use Retrofit and Spring Boot to develop a RESTful HTTP client to GitHub's API."
date: 2018-09-19 07:56
category: Technical Guide, First Application, Retrofit
post_length: <1-5 (Run postlength.sh to generate score when article is ready)>
author:
  name: "Vladimir Fomene"
  url: "https://twitter.com/VladimirFomene"
  mail: "vladimirfomene@gmail.com"
  avatar: "https://s.gravatar.com/avatar/30b8d1b7c0dab4bb311c121a47a6aae9?s=80"
design:
  bg_color: "#3471C0"
  image: "https://cdn.auth0.com/blog/java-jcp/logo.png"
tags:
- retrofit
- spring-boot
- java
- http-client
- http
- restful
- rest
- restful-api
related:
- 2017-09-05-automatically-mapping-dto-to-entity-on-spring-boot-apis
- 2017-03-30-java-platform-and-java-community-process-overview
- 2017-08-10-implementing-jwt-authentication-on-spring-boot
---

**TL;DR:** In this article ,you will learn how to use [Retrofit, an HTTP client library](https://square.github.io/retrofit/), and [Spring Boot](https://spring.io/projects/spring-boot) to create a client for a RESTful API. You will use Spring Boot and its `RestController` functionality alongside Retrofit to develop a facade over GitHub's API. You will also learn how to convert JSON to POJOs (Plain Old Java Objects) using [Google's Gson](https://github.com/google/gson) library and, last but not least, you will learn how to use the documentation of a RESTful API to your advantage. If you need, you can find the reference code developed throughout this article in this GitHub repository.

## Prerequisites

To follow this article along, you will need to have the following:

* JDK 8 or greater (JDK 10 was used in this article).
* A mature IDE (Integrated Development Environment) of your choice (i.e., [IntelliJ](https://www.jetbrains.com/idea/), [Netbeans](https://netbeans.org/), or [Eclipse](https://www.eclipse.org/)).
* An external HTTP client like [`curl`](https://curl.haxx.se/), [Postman](getpostman.com), or whatever.
* [A GitHub account](https://github.com/).

Once you have all of these, all you need is:

- A basic understanding of [the client-server architecture](https://www.webopedia.com/TERM/C/client_server_architecture.html).
- Some knowledge around [the HTTP protocol](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol).
- Some basic to intermediate knowledge of [the Java programming language](https://en.wikipedia.org/wiki/Java_(programming_language)).
- Basic knowledge around [Spring Boot](https://spring.io/projects/spring-boot).

## What is a RESTful Client?

REST, which stands for _Representational State Transfer_, is an architecture style used to design web APIs
(Application Programming Interfaces). REST is not a standard but rather a set of constraints used to design web APIs in
well designed format. In REST, `GET` requests should be used for resource lookup and `PUT`, `POST`, `DELETE` for updating,
creating, and deleting a resource respectively.

In this article, you will develop a Spring Boot app that is a RESTful client because it follows this constraints to communicate with a RESTful API ([GitHub's API](https://api.github.com)).

The explanation above is just a quick introduction so you know what this is all about. As you can imagine, there is much more when it comes to the RESTful architecture. If you are curious, you can check the following resources after reading this article:

- [REST Architectural Constraints](https://restfulapi.net/rest-architectural-constraints/)
- [Richardson Maturity Model](https://martinfowler.com/articles/richardsonMaturityModel.html)

## What Is Retrofit?

According to the official [website](https://square.github.io/retrofit/), Retrofit is a type-safe HTTP client for Java and Android which was developed by [Square](https://squareup.com/). With Retrofit, all you need to do is declare a Java interface to represent your API. Then, you can pass the API configuration to Retrofit and you will get back a Java class implementation of your interface.

Retrofit allows you to make both synchronous and asynchronous request to APIs. For the purpose of simplicity, this article will focus on synchronous requests only. But you can check the other one right after reading the article.

One cool feature introduced by Retrofit is that it allows you to modify your API request through annotation on methods in your interface.

## Why use the GitHub API?

To learn about Retrofit's capabilities, you could use many REST APIs out there. However, for a few reasons described below, you will use [GitHub's REST API](https://developer.github.com/v3/):

- Nearly all developers have GitHub accounts and, if you do not have one, [creating one](https://github.com/join?source=header-home)  will only take a couple of seconds.
- GitHub API version 3 follows the REST architectural design and has a very good documentation.
- Last, but not least, GitHub allows you to query their API once you have an _access token_, _username and password_, or a _secret key_ without requesting that you submit an application to use their API.

## How to use GitHub API

First, as already mentioned, you will need a [GitHub account](https://github.com/join?source=header-home). After creating (or signing into) your own account, click on your GitHub's profile photo (on the top right corner of the page) and choose [the _Settings_ option](https://github.com/settings/profile).

On that page, click on _Developer settings_ on the left pane of the page, then click on _Personal access tokens_ (again on the left pane) to arrive at the page where you manage access tokens. On this page, click on [_Generate new token_](https://github.com/settings/tokens/new). Now, GitHub will show you a form where it will ask you to enter a description for your token (you can insert something like "Retrofit Client") and will ask you to choose what _Scopes_ you want to give to this token.

For that, you can select `repo` and `delete_repo` scopes. Scopes determine the type of queries you will be able to do on GitHub's API with the token you will get.

To finalize, click on _Generate token_ to create the token. Store this new token somewhere safe on your laptop.

![Generating a new personal access token on GitHub](https://cdn.auth0.com/blog/retrofit-spring-boot/generating-a-personal-access-token-on-github.png)

## Creating a RESTful Client with Retrofit and Spring Boot

In this section, you will create a Spring Boot application that can `GET`, `POST`, and `DELETE` GitHub repositories via the GitHub API. For starters, go to [the Spring Initializr page](https://start.spring.io/) and fill out the form like this:

- _Generate a_: At the top of the page, choose "Gradle Project".
- _Group_: You can leave this field as `com.example`.
- _Artifact_: You can type `github-client` in this one.

![Generating a new Spring Boot project.](https://cdn.auth0.com/blog/retrofit-spring-boot/generating-a-spring-boot-project.png)

You can leave untouched the other options. After that, click on _Generate Project_. Clicking on this button will make this page send you the `github-client.zip` file with your project. Unzip this file in your preferred location (e.g., `~/Projects/`) and import it in your IDE.

For the moment, your project contains only a single class called `GithubClientApplication`. Also, it contains two dependencies in the `build.gradle` file: `spring-boot-starter-web` and `spring-boot-starter-test`. If you are using Java 10, you will have to update the `build.gradle` file as follows

```gradle
// ... leave every thing else untouched ...

dependencies {
  // ... don't remove the other two dependencies ...
  compile('javax.xml.bind:jaxb-api:2.3.0')
}
```

Make sure you allow your IDE to import the changes after updating this file.